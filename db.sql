--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: cr_entry; Type: TABLE; Schema: public; Owner: graham; Tablespace: 
--

CREATE TABLE cr_entry (
    id integer NOT NULL,
    content text NOT NULL,
    author character varying(100),
    tags character varying(250) DEFAULT NULL::character varying,
    state character varying(30) DEFAULT ''::character varying NOT NULL,
    created timestamp with time zone NOT NULL,
    last_used timestamp with time zone,
    original_filename character varying(100) DEFAULT NULL::character varying
);


ALTER TABLE public.cr_entry OWNER TO graham;

--
-- Name: cr_entry_id_seq; Type: SEQUENCE; Schema: public; Owner: graham
--

CREATE SEQUENCE cr_entry_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cr_entry_id_seq OWNER TO graham;

--
-- Name: cr_entry_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: graham
--

ALTER SEQUENCE cr_entry_id_seq OWNED BY cr_entry.id;


--
-- Name: cr_entry_id_seq; Type: SEQUENCE SET; Schema: public; Owner: graham
--

SELECT pg_catalog.setval('cr_entry_id_seq', 209, true);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: graham
--

ALTER TABLE ONLY cr_entry ALTER COLUMN id SET DEFAULT nextval('cr_entry_id_seq'::regclass);


--
-- Data for Name: cr_entry; Type: TABLE DATA; Schema: public; Owner: graham
--

COPY cr_entry (id, content, author, tags, state, created, last_used, original_filename) FROM stdin;
106	Guy Kawasaki, on saying that you need to find the key influencers in any organization, and work with them:<br>The logical question is now,  How do you find the key influencers?  The answer is that you ask people at the company to answer this simple question,  When there are problems, who does everyone go to at this organization? 	Guy Kawasaki	people	ACTIVE	2006-04-16 12:50:16-07	2012-06-11 04:10:02-07	PeoplePage
107	Nat Pryce: <br><br>Often the line along which to split a class is pretty obvious. A rule<br>of thumb I follow is to describe the class in one sentence and then<br>split it into multiple classes on every instance of the word "and". <br>E.g. go from a class that "makes a request to the server and parses<br>the XML and displays it in a grid control" to a class that makes<br>server requests, a class that parses XML and a class that manages the<br>display.<br>When I find I can't do that, it's usually the case that I haven't<br>clearly allocated responsibilities among a cluster of related classes.<br>In that case, refactoring is a bit more work and involves moving<br>behaviour between classes until it feels right.  Again, describing a<br>class to your pair or writing the descriptions on index cards on your<br>desk can help. Classes with vague descriptions are something to look<br>out for.  Class names or descriptions containing words like "manager",<br>"data", "helper", "object", or containing the names of patterns are<br>good suspects for suffering from badly assigned responsibilities. <br>Such classes often disappear while refactoring, to be replaced by<br>classes with names that make sense in domain terms.<br><br>Describe classes by their roles and responsibilities. Objects are things that do things.<br><br>My usual advice about using servlets or session EJBs I advise teams to<br>use the J2EE APIs purely as an adapter between the application server<br>and a clean domain model and view layer.  Write a quick shim against<br>the J2EE APIs, concentrate on writing good clean object-oriented code<br>in the rest of the app and everything falls out neatly.<br>Of course, the "writing good clean object-oriented code" topic is a<br>whole nuther kettle of fish.<br>	Nat Pryce	splitting classes	ACTIVE	2006-04-16 12:50:16-07	2012-06-13 04:10:02-07	SplittingClasses
109	*Gene Michael Stover* at http://www.lisp-p.org/controversy<br><br>Good software development depends on good software developers: programmers, analysts, managers, testers, & others. Hell, it even depends on good customers.<br><br>Processes can remove only so much of the risk of software development. Once you've removed all the risk you can, you must rely on the skills of your people, & they will need to do some hacking.<br><br>Hacking is experimental programming to test theories & algorithms, and to work your way through libraries, APIs, protocols, & other tools. There will be kinks in the works for which you cannot plan. The only way to find them is to hack through it. Bottom-up implementation. That's hacking, & you can't develop most programs without it.<br><br>The only program which you can design before you code is the program you've written so many times that you know everything it needs to do. (Nope, you can't always put it in a reusable library. Sometimes, you have to write from scratch.) That's the only program you can design completely before you code. And why is that? It's because you've done all your hacking on your previous implementations!<br><br>For what it's worth, I don't believe the software development crisis is a crisis. It's just a fact that most software development these days is bad software development. If we never come to the day when most software development is good software development, life as we know it will still continue. Trust me; I know these things. <br>	Gene Michael Stover	software hacking crisis	ACTIVE	2006-04-16 12:50:16-07	2012-06-18 04:10:02-07	ToBeClassified
110	<br>The more the structure of a running system has the ability to differ from it's static structure, the harder it is to understand that system from the source code. <br>If an object communicates with either an interface an abstract object, then you can't easily see what is going to happen simply by reading the source code.<br>	Graham King	polymorphism	ACTIVE	2006-04-16 12:50:16-07	2012-06-12 04:10:02-07	ToBeClassified
111	 Development environment smells:<br><br>- No command line build. This is pure evil. No excuses, ever.<br>- Build environment tied to a particular IDE. I can't believe that people do this. But they do, sigh.<br>- No specific development test environment. You need to practice deployment<br>- Development environment depends on externally managed resources. Database goes down, team stops work. Dumb.<br>- A development environment that mandates a "reusable framework". Reuse is dead. Build a bridge, get over it.<br><br>		environment smells	ACTIVE	2006-04-16 12:50:16-07	2012-06-21 04:10:02-07	ToBeClassified
112	Writing well:<br><br>- Speak what you write: Read it out loud to see if it is easy to read.<br>- Punctuate. Check spelling and grammar.<br>- Keep sentences short.<br>- Don't use words you don't really know<br>- Front load your point: Don't make people wade through anecdotes to get to the point.<br>- When in doubt, simplify. Simpler is easier to understand, hence is more effective communication.<br><br>(from http://www.scalzi.com/whatever/004023.html)<br>	John Scalzi	writing	ACTIVE	2006-04-16 12:50:16-07	2012-06-22 04:10:02-07	ToBeClassified
113	 When inserting an abstract interface is infeasible because the target is third party software then insert your own interface / class between you and the software and make all interactions with it use that.<br><br> The inserted interface / class is an Adapter.<br>		adapter pattern	ACTIVE	2006-04-16 12:50:16-07	2012-06-25 04:10:02-07	AdapterPattern
114	Singleton Pattern<br><br>The Singleton pattern is used when you only need one of a particular object. For example a printer manager object, a database connection pool, etc.<br><br>This is achieved by giving the class a private class level method of type itself, making the constructor private, and giving it a class level getInstance() method which returns the only copy of itself.<br><br>Singleton's are considered harmful by many these days because they are object-oriented global variables. And we _know_ those are bad.<br>		singleton pattern	ACTIVE	2006-04-16 12:50:16-07	2012-06-27 04:10:02-07	SingletonPattern
131	 A rule that attempts to minimize coupling between objects.<br><br> A method of an object may only call methods belonging to:<br><br> - Itself<br><br> - Parameters that were passed to the method<br><br> - Objects it creates<br><br> - Directly held component objects (attributes of that object)<br><br> Hence a method is not allowed to call methods on a global object (static methods of other objects) or methods belonging to objects returned by calls (for example a.getB().doSomething()).<br><br> This means a method is not allowed to know or find out about the internal structure of another object.<br><br> To use a real-world analogy: A dog has legs. If you want your dog to run do you talk (send a message to) your dog or to each leg? Further, should you be able to manipulate the dog's leg without it knowing about it? What if your dog wants to move its leg and it doesn't know how you left it? You can really confuse your dog. See http://c2.com/cgi/wiki?DontConfuseYourDog<br> <br> See: http://c2.com/cgi/wiki?LawOfDemeter<br>		lawofdemeter design glossary	ACTIVE	2006-04-16 12:50:16-07	2012-03-12 04:10:05-07	LawOfDemeter
132	 A model is a means to an end, and never an end in itself. It is produced to aid communication of a design.<br>		modelling	ACTIVE	2006-04-16 12:50:16-07	2012-03-13 04:10:07-07	ModellingPage
115	 Read better:<br><br>SQ3R technique:<br>    * Survey:<br>      Survey the document: scan the contents, introduction, chapter introductions and chapter summaries to pick up a shallow overview of the text. Form an opinion of whether it will be of any help. If it does not give you the information you want, discard it.<br>    * Question:<br>      Make a note of any questions on the subject that come to mind, or particularly interest you following your survey. Perhaps scan the document again to see if any stand out. These questions can be considered almost as study goals - understanding the answers can help you to structure the information in your own mind.<br>    * Read:<br>      Now read the document. Read through useful sections in detail, taking care to understand all the points that are relevant. In the case of some texts this reading may be very slow. This will particularly be the case if there is a lot of dense and complicated information. While you are reading, it can help to take notes in Concept Map format.<br>    * Recall:<br>      Once you have read appropriate sections of the document, run through it in your mind several times. Isolate the core facts or the essential processes behind the subject, and then see how other information fits around them.<br>    * Review:<br>      Once you have run through the exercise of recalling the information, you can move on to the stage of reviewing it. This review can be by rereading the document, by expanding your notes, or by discussing the material with colleagues. A particularly effective method of reviewing information is to have to teach it to someone else!<br>		reading complexity	ACTIVE	2006-04-16 12:50:16-07	2012-06-28 04:10:02-07	OnComplexity
116	Two weapons against complextiy:<br><br>- Intuitiveness of the programming experience from the developers point of view.<br>- Ability to decompose the whole into smaller units and aggregate individual units into a whole.<br>		complexity	ACTIVE	2006-04-16 13:55:00-07	2012-02-07 04:10:02-08	
117	*Generator*<br><br>Generator --> Component<br><br>Creates test data and feeds it into the component under test. Test data can be read from a script file that contains instructions on the test execution as well as test data. Or test data can come from a capture / replay mechanism which captures data output by an external application or another test case and stores it for replay. Or test data can be created randomly or algorithmically.<br><br>*Verifier*<br><br>Component --> Verifier<br><br>A Verifier compares actual test results with expected results. Usually tied into a reporting mechanism.<br><br>*Stub*<br><br>Component <--> Stub<br><br>Simulates part of the system under test.<br><br>		testing helper	ACTIVE	2006-04-16 12:50:16-07	2012-02-08 04:10:08-08	TypesOfTestHelper
118	---+ Polymorphism<br><br>---++ From the dictionary<br>polymorphism<br><br><theory, programming> A concept first identified by<br>Christopher Strachey (1967) and developed by Hindley and<br>Milner, allowing types such as list of anything. E.g. in<br>Haskell:<br><br>length :: [a] -> Int<br><br>is a function which operates on a list of objects of any type,<br>a (a is a type variable). This is known as parametric<br>polymorphism. Polymorphic typing allows strong type checking<br>as well as generic functions. ML in 1976 was the first<br>language with polymorphic typing.<br><br>Ad-hoc polymorphism (better described as overloading) is the<br>ability to use the same syntax for objects of different types,<br>e.g. "+" for addition of reals and integers or "-" for unary<br>negation or diadic subtraction. Parametric polymorphism<br>allows the same object code for a function to handle arguments<br>of many types but overloading only reuses syntax and requires<br>different code to handle different types.<br><br>See also generic type variable.<br><br>In object-oriented programming, the term is used to describe<br>a variable that may refer to objects whose class is not<br>known at compile time and which respond at run time<br>according to the actual class of the object to which they<br>refer.<br>	Christopher Strachey	polymorphism glossary	ACTIVE	2006-04-16 12:50:16-07	2012-02-09 04:10:04-08	PolyMorphism
119	Methods / Functions of polymorphic type (that can take many different types) are said to be polymorphic<br><br>The opposite of polymorhpic is monomorphic. A monomorphic function is for example: thisFunc(int, int)<br><br>All methods that take an object are polymorphic, because the object given could be a subclass of the declared object, and this will only be known at runtime.<br><br>		polymorphism	ACTIVE	2006-04-16 12:50:16-07	2012-02-10 04:10:07-08	PolyMorphism
120	 Deployment should be 1 button and easily repeatable. Not a project in itself.<br><br> Should be able to deploy without affecting running of live site. For example use a cluster and deploy on one server after another. Live upgrade.<br><br> A set of EnvironmentalTest makes sure we know what we are deploying into, and serve as tests when the systems people change things.<br><br>		deployment	ACTIVE	2006-04-16 12:50:16-07	2012-02-13 04:10:05-08	DeploymentPage
121	Design goal: A set of small, loosely coupled components.<br>		design	ACTIVE	2006-04-16 12:50:16-07	2012-02-14 04:10:05-08	DesignPage
122	Least Suprise: Always do the least suprising thing. In other words, make it work intuitively. If a straight line search works, use that, instead of a complex search / hashtable / etc. The next programmer might think you weren't very good, but they will understand the code straight away. Which means you are good.<br>		general principles	ACTIVE	2006-04-16 14:28:00-07	2012-02-15 04:10:05-08	
123	We expect estimates to be spread around the target; i.e. the real results form a bell curve around our estimates. If estimates are consistently too short or too long, then we are not learning from our estimates.<br><br><br>		estimation	ACTIVE	2006-04-16 12:50:16-07	2012-02-17 04:10:06-08	OnEstimation
124	For early estimates simply categorise tasks as 'easy', 'medium' or 'hard', and assign each category a number of days.<br>		estimation	ACTIVE	2006-04-16 13:59:00-07	2012-02-20 04:10:03-08	
125	If a project runs over schedule / budget we can:<br><br> - Halt it and ship what we have. Agile projects are well setup to deal with this.<br> - Increase the schedule.<br> - Reduce the scope.<br> - That's it. No other control options.<br>		estimation schedule overrun	ACTIVE	2006-04-16 13:59:00-07	2012-02-21 04:10:06-08	
126	Least Work: Do the least it takes to make the software useful, whilst leaving it clean for the future. Do whatever it takes to make your work easier. If someone else has already done it, see if you can use it.<br>		general principles	ACTIVE	2006-04-16 14:28:00-07	2012-03-05 04:10:05-08	
127	Simplicity: If it isn't simple, then it's *wrong*.<br>		general principles	ACTIVE	2006-04-16 14:27:00-07	2012-03-06 04:10:05-08	
128	No Complaining: Don't complain if you are not willing to fix the problem. Complainers are lazy, petty, and spiteful with no intention of ever being helpful. Corrolary: If you spot a problem, it is your resonsability.<br>		general principles	ACTIVE	2006-04-16 14:28:00-07	2012-03-07 04:10:02-08	
129	 An index card on which one records the responsibilities and collaborators of classes, thus the name, which stands for Class-Responsibility-Collaboration.<br><br> Encourages thinking in terms of what classes DO instead of thinking of them as places to put data. <br><br> Encourages communication. The index cards can be handed around / moved around the table.<br><br> See: http://c2.com/cgi/wiki?CrcCard<br> 		crccard design	ACTIVE	2006-04-16 12:50:16-07	2012-03-08 04:10:02-08	CrcCard
130	Tell an object what to do instead of asking it for it's state. Treat 'getters' as an anti-pattern. Concentrate on what objects say to each other rather than how their state changes.<br>		design	ACTIVE	2006-04-16 12:50:16-07	2012-03-09 04:10:05-08	TellDontAsk
133	Modelling is about communication<br>		modelling	ACTIVE	2006-04-16 12:50:16-07	2012-03-14 04:10:07-07	ModellingPage
134	Core principles of Agile Modelling:<br> - Active stakeholder participation<br> - Apply the right artifact(s)<br> - Collective ownership<br> - Create several models in parallel<br> - Create simple content<br> - Depict models simply<br> - Display models publicly<br> - Iterate to another artifact<br> - Model in small increments<br> - Model with others<br> - Prove it with code<br> - Single source information<br> - Use the simplest tools<br><br> http://www.agilemodeling.com/<br><br>	Scott Ambler	modelling agile	ACTIVE	2006-04-16 12:50:16-07	2012-03-15 04:10:04-07	ModellingPage
135	Inversion Of Control<br><br> Also called the HollywoodPrinciple ('Don't call us we'll call you'). <br><br> Objects implement an interface and register themselves, and get called when the time is right. Used mostly by GUIs (event driven).<br><br> In software design this pattern is used to facilitate unit testing and produces designs with less coupling. Instead of an object creating the objects it needs or fetching them itself, they are provided to it, either in the constructor, via a mutator, or as a parameter to the call.<br><br>See: http://c2.com/cgi/wiki?HollywoodPrinciple<br>		inversionofcontrol design	ACTIVE	2006-04-16 12:50:16-07	2012-03-16 04:10:06-07	InversionOfControl
136	LiskovSubstitutionPrinciple<br><br>_Subclasses should be substitutable for their base classes_<br><br> A client of a base class should continue to function properly if a derivative of that base class is passed to it. The contract of the base class must be honoured by the derived class.<br>		liskovsubstitutionprinciple glossary oo	ACTIVE	2006-04-16 12:50:16-07	2012-03-19 04:10:04-07	LiskovSubstitutionPrinciple
137	 Mock objects is a technique for unit testing an object by replacing the objects it interacts with with mocks. If we are unit testing User and it needs an Address object, we create a mock object that implements the Address interface and give that to the User.<br><br> A Mock object has to implement the appropriate interface, but none of the behaviour. Before being used we tell it what method calls to expect and after using it we call an extra method on it (usually called 'verify()') which checks all its calls were correct.<br><br> By surrounding an object with mocks we effectively isolate it from the rest of the application and test its interactions, like an electronics engineer plugging a component into a test bed.<br><br> In order to be able to replace the objects an object uses by mocks we need the InversionOfControl principle which is helped a lot by TellDontAsk.<br><br> When an object deals with an external API / library, there is a temptation to mock objects of that library. Instead of doing this heed the Don't Mock Objects You Don't Own principle. Wrap all access to that outside library with a thin adapter. For example pass all your calls to Java's JDBC through a Database interface - then you will only need to mock your Database.<br><br>See: http://www.mockobjects.com<br>		mockobject testing	ACTIVE	2006-04-16 12:50:16-07	2012-03-23 04:10:06-07	MockObjects
138	Component: <br><br> Unit of deployment<br>		component glossary	ACTIVE	2006-04-16 14:16:00-07	2012-03-26 04:10:06-07	
139	InterfaceSegregationPrinciple<br><br> _Many role specific interfaces are better than one general purpose interface_<br><br> Think of interfaces in terms of roles. If a class fulfills several roles or has several responsabilities then make it implement several interfaces rather than only one fat one.<br><br> This is an enabling technology of component design.<br>		interface design component	ACTIVE	2006-04-16 12:50:16-07	2012-03-27 04:10:05-07	InterfaceSegregationPrinciple
140	Graphical User Interface Design<br><br>Least Damage: Don't let the user do something they don't understand. If you do, give them a way to undo it. Users should feel safe using the software.<br><br>'It Just Works': Never expect or require that the user will read the manual. Lead the user to her goal. Encourage the user to explore.<br><br>		gui design	ACTIVE	2006-04-16 12:50:16-07	2012-03-28 04:10:06-07	GuiDesign
141	EnvironmentalTest<br><br>An environment test verifies that the environment into which you are about to deploy an application is in the state that you expect: that expected directories exist; that files are readable when running under service accounts; that database logins are set up; that stored procedures have been loaded into the database; etc. etc. Environment tests are also used to verify that the development environment accurately reflects the production environment.<br><br>The application is structured as a package of core services, domain model, data mapping layer, etc. that are used by multiple client packages. The clients include the deployed executables, some development tools for ad-hoc exploratory testing, the unit tests, the integration tests and now the environment tests.<br><br>Those environment tests have already saved my bacon more than once. At deploy time they detected that the application's login had not been set up correctly in the production database. Later, while helping with the install of another application, they detected that the install had deleted registry entries used by COM objects shared between the two applications. Both problems were easy to fix because they were detected by the environment tests without having to actually run the application in the live environment.<br><br>From Nat Pryce, http://nat.truemesh.com/archives/000515.html<br>	Nat Pryce	environment testing	ACTIVE	2006-04-16 12:50:16-07	2012-03-29 04:10:06-07	EnvironmentalTest
142	 Use stories should:<br><br> - Focus on customer value.<br><br> - Be as detailed as possible - we need to be able to estimate them.<br><br> - Think of how we could test that this story is completed.<br><br> Way more detail at: http://c2.com/cgi/wiki?UserStory<br>		requirement gathering	ACTIVE	2006-04-16 12:50:16-07	2012-03-30 04:10:08-07	UserStories
143	 Logging:<br><br> Ability to turn on / off logging at runtime and switch verbosity of it is very valuable. log4j does this.<br><br> Log entries should include the date / time and user performing the action.<br> We should log all interactions with the outside world:<br><br> - Front end: Every controller (AddUser, UpdatePrice, etc) should log that it has run.<br> - Back end: SQL, HTTP connections, calls to external systems / APIs, etc.<br><br> Things are most likely to go wrong at the boundary between systems, and our UnitTesting don't verify those, so we need lots of visibility.<br><br> Also of course log all errros with full stack trace.<br>		logging	ACTIVE	2006-04-16 12:50:16-07	2012-04-02 04:10:08-07	LoggingPage
144	 Chess, like any other complex intellectual activity, involves a combination of knowledge, creative vision, and technique.<br>Good chess players are able to acquire and store a lot of information.<br><br>Software is a truly amazing media, unlike anything else found in nature or created by mankind.<br><br>- Vitoria Livschitz, Sun Microsystems.<br>	Vitoria Livschitz	chess software think	ACTIVE	2006-04-16 12:50:16-07	2012-04-04 04:10:04-07	IntellectualActivity
145	Integration testing<br><br>Integration testing focuses on the interaction between multiple components. Integration testing strategy focuses on the lower layers of the architecture first because they have the least external dependencies. Once we are satisfied that the lower layers work correctly we add a layer and test then, etc. This is bottom-up testing.<br><br>		integration testing	ACTIVE	2006-04-16 12:50:16-07	2012-04-05 04:10:07-07	IntegrationTesting
146	Functional Programming<br><br>Functional programming is based on the idea of calculation. We define for ourselves the functions to be used and the implementation will calculate the value of expressions which use these functions, just as a traditional calculator will calculate the arithmetical expressions we give it.<br>Functional languages describe _what_ the answer is, whereas imperative   language describe _how_ to get to the answer.<br><br>Examples of functional programming languages include Haskell and Miranda.<br><br>The three significant functions of a functional programming language are:<br><br>*map* : Takes a function and an array and returns an array which is the result of applying the function to each of the arguments in the initial array.<br>Example: map (*2) [1,2,3] = [2, 4, 6]<br><br>*fold* : Takes a binary (ie two arg) function and an array and returns a single value, the result of applying the function to each pair of elements in the array. You can fold to the right or the left.<br>Example: fold (+) [1,2,3] <br>= 1 + (fold (+) [2,3])<br>= 1 + 2 + (fold (+) [3])<br>= 1 + 2 + 3<br>= 6<br><br>*filter* : Take a single argument function that returns a boolean and and array and returns an array of those elements in the inital array for which the function returns true.<br>Example: filter (>2) [1,2,3] = [3]<br><br>		functional programming	ACTIVE	2006-04-16 12:50:16-07	2012-04-06 04:10:05-07	FunctionalProgramming
147	Currying: <br><br>Making a function of two or more arguments accept its arguments one at a time is called currying (after Haskell B Curry). Curried functions can be partially applied, producing other functions.<br>	Haskell B Curry	currying glossary	ACTIVE	2006-04-16 14:14:00-07	2012-04-09 04:10:02-07	
148	In a functional programming language, and in general good program design, functions or methods should perform some behaviour on their arguments and return a value. There should be no SideEffects.<br>A no argument function / method should be substitutable for a value.<br>You should not have to know whether your value is stored or calculated.<br>Example: 'price() * fxRate()' could just as easily be 'price * fxRate' [In most languages you need the () if it's a method, so not exactly equivalent, but pretty close]<br>		functional programming naming	ACTIVE	2006-04-16 14:13:00-07	2012-04-10 04:10:15-07	
149	Architecture: <br><br>The structural relationship between the individial components that together create an application. The dependency relationships between units of deployment.<br>		glossary architecture	ACTIVE	2006-04-16 12:50:16-07	2012-04-11 04:10:02-07	TheGlossary
150	Functor: Object that is only really a method, not a business object.		functor glossary	ACTIVE	2006-04-16 14:15:00-07	2012-04-12 04:10:02-07	
151	 To test you need to be able to:<br><br> - Control the system under test: Ideally via an API that allows control of the system (a test interface), or via a gui testing tool. API is much better.<br> - Inspect the results: Again an API is most helpfull but also good logs and consistent error reporting help.<br><br><br><br>		testing	ACTIVE	2006-04-16 12:50:16-07	2012-04-13 04:10:05-07	TestingPage
152	 How to investigate intermittent problems: http://blackbox.cs.fit.edu/blog/james/archives/000197.html		testing	ACTIVE	2006-04-16 14:18:00-07	2012-04-16 04:10:02-07	
153	*Test Driven Development*<br><br>Test First Development (or Test Driven Development) implies that rather than deferring testing until the end of the project we move it to the beginning of the lifecycle. Before devlelopers code a new piece of functionality they define and develop the test cases describing the required functionality. Then, they develop code modules until all test cases succeed. Development occurs in rapid iteration cycles between developing, verifying and correcting code.<br><br>Automated testing, particularly as part of TDD, has the ability to change the dynamics of the development team in a way that testing is no longer seen as a burden but becomes a natural part of the development process. This change in developer mindset is key to test-driven development.<br>		testing tdd	ACTIVE	2006-04-16 14:17:00-07	2012-04-17 04:10:02-07	
154	*James Gosling on localised exception handling* (paraphrased occasionaly):<br><br>When you try to open a file and it's not there, your coping strategy is really determined by what you were going for. Some guy (i.e. piece of code) miles away isn't going to know what to do. The code that tried to open the file knows what to do, whether it be trying a backup file, looking in a different directory, or asking the user for another filename.<br><br>Having one big catch clause on the outside really only works if your exception handling philosophy is simply to die. If you have an event loop, you can maybe cause that one event to just be tossed. If you have a plugin architecture, the enclosing environment could respond to a failure in the plugin by disabling it. But if you're not doing an event driven program or plugins, there isn't an outside place where you can take big hunks of functionality and saw them off.<br><br>It's good to have a last ditch catch clause though, specifially for a server, so that we can fail the offending request only.<br><br>In general, when you are writing a declaration in a throws clause, it is good to try to be as specific as possible because it gives more information to the context about exactly what went wrong.<br>	James Gosling	exception handling	ACTIVE	2006-04-16 12:50:16-07	2012-04-18 04:10:02-07	ExceptionHandling
155	*Designing with exceptions*<br><br>Think what the throws clause should contain at the abstract contract level.<br><br>Exception translation can be helpfull, for example if in something that reads a database deep inside it could cause a MalformedURLException - the interface should not have to deal with that, hence exceptions can be wrapped in more meaningfull ones.<br>		exception design	ACTIVE	2006-04-16 14:21:00-07	2012-04-19 04:10:02-07	
156	*Do Or Die*<br><br>Do-or-die is simple: either an operation succeeds or it raises an exception. When you call a do-or-die method, any normal code path relying on the results of that method have a guarantee for sanity - there are no problems to check for or deal with in the normal code path. The abnormal code path coping with the raised exception handles all problems. (Contrast this with languages lacking exceptions.) This means:<br><br>   1. Any procedure always returns void; no boolean returns that require checking for success or failure. Just call the procedure and be done with it.<br>   2. Any function always returns a valid object; no null returns that require nullity checks. Just capture the return and use it as expected.<br>		exception handling	ACTIVE	2006-04-16 14:20:00-07	2012-04-20 04:10:03-07	
157	Less is more.<br><br><br>		general principles	ACTIVE	2006-04-16 12:50:16-07	2012-04-23 04:10:05-07	GeneralPrinciples
158	Any intelligent fool can make things bigger, more complex, and more violent. It takes a touch of genius, and a lot of courage, to move in the opposite direction.<br>    ---Albert Einstein<br>	Albert Einstein	general principles	ACTIVE	2006-04-16 12:50:16-07	2012-04-25 04:10:05-07	GeneralPrinciples
159	 From Dave Hoover, a quote from C.S. Lewis:<br><br>If we let ourselves, we shall always be waiting for some distraction or other to end before we can really get down to our work. The only people who achieve much are those who want knowledge so badly that they seek it while the conditions are still unfavourable. Favourable conditions never come.<br>	C. S. Lewis	general principles	ACTIVE	2006-04-16 12:50:16-07	2012-04-26 04:10:05-07	GeneralPrinciples
160	Programming is about communication between humans with a computer eavsdropping. There is a tension between communicating to the machine and to other programmers with the same source text.<br>		general principles	ACTIVE	2006-04-16 14:27:00-07	2012-04-27 04:10:05-07	
161	 Symptoms of a bad architecture / rotting design:<br><br> *Rigidity*<br><br> Rigidity is the tendency for software to be difficult to change even in simple ways. Every change causes a cascade of subsequent changes in dependent modules. What begins as a simple two day change to one module grows into a multi-week marathon of change in module after module as engineers chase the thread of the change through the application.<br><br> *Fragility*<br><br> Fragility if the tendency of software to break in many places every time it is changed. Often the breakage occurs in areas that have no conceptual relationship with the area that was changed.<br><br> *Immobility*<br><br> Immobility is the inability to reuse software from other projects or from parts of the same project. It often happens that one engineer will discover that he needs a module that is similar to one that another engineer wrote. However it also often happens that the module in question has too much baggage that it depends on.<br><br> *Viscosity*<br><br> When faced with a change, engineers usually find more than one way to make the change. Some of the ways preserve the design, others do not (i.e. they are hacks). When the design preserving methods are harder to emply than the hacks, then the viscosity of the design is high. It is easy to do the wrong thing but hard to do the right thing.<br>		design smell	ACTIVE	2006-04-16 12:50:16-07	2012-04-30 04:10:05-07	SymptomsOfRottingDesign
162	 Unit Testing:<br><br>We want to eliminate outside dependencies as much as possible when testing a single component in isolation.<br><br>Use Stubs and Mock objects to build a harness around the component. Working test first, and designing our components to be testable in isolation significantly reduces their coupling with each other. Tests are first class clients of the code, so the code often changes in response to the requirements of the tests. The tests are the first client of the code, the second is usually the application, and if re-used there can be many other clients.<br><br>See DependencyInversionPrinciple<br><br>Testing at the unit level ensures that when integration begins we can have confidence in the functinality of each component being integrated.<br><br>Always test each application with xUnit (http://www.junit.org), whether it is part of a bigger system, or standalone.<br>		unit testing	ACTIVE	2006-04-16 12:50:16-07	2012-05-01 04:10:03-07	UnitTesting
163	 Think like the user:<br><br>It takes a lot more work to understand the other person than it takes to understand you. <br><br>You might say, "I have these two things together so I will let the user (the person using the API) manipulate them." But that user didn't say, "Hey, I want to manipulate these two data structures!" Often the user is saying, "I want to get this result." If users could get a result without manipulating the data structures, they'd be happy as clams. <br>If you can make it more natural for them to get that result, the fact that you have to go through 10 times as much work to access those data structures is good; it means you are providing value. Many people are much more likely to think about what they have in hand and what they can do. They think from the implementation out, instead of thinking from the user in.<br>	Ken Arnold	design	ACTIVE	2006-04-16 12:50:16-07	2012-05-02 04:10:04-07	ThinkLikeTheuser
164	*Layers*<br><br>Well-architected systems tend to be organized in multiple layers depending only on 'lower' layers. The lower layers contain generic functions that are used by the more specific functions in the upper layers. Forcing one-way dependencies between upper and lower layers avoids circular dependencies between components. It also clarifies the process of unit and integration testing: Test the lower levels first and build up. The higher levels can be tested with mocks / stubs replacing the lower layers.<br>		architecture	ACTIVE	2006-04-16 12:50:16-07	2012-05-03 04:10:04-07	ArchitecturePage
165	Enterprise Application Integration and Service Oriented Architectures (for example Web services) share many similarities: They consist of distributed components or applications, developed in different languages and running on multiple platforms, connected by a synchronous or asynchronous messaging infrastructure.<br><br>		architecture eai soa	ACTIVE	2006-04-16 12:50:16-07	2012-05-04 04:10:04-07	ArchitecturePage
166	*Message bus*<br><br>A common _Messaging Infrastructure_ or _Message Bus_ enables secure and reliable communication across enterprise networks. The message bus has the ability to _route_ messages between message publishers and message subscribers. It queues messages if a subscriber is not available, relieving the publisher from the need to store and resend messages.<br><br>Applications publish data to or receive data from the message bus via _Adaptors_ or _Connectors_. These connectors make an application's proprietary inteface available to other applications via the message bus.<br><br>Since EAI solutions act as the glue that holds together many disparate systems, they must provide interfaces or adapters through which each of these systems can be invoked and accessed. The Adapters translate between bus messages and the application's API and back again.<br><br>See also: http://www.eaipatterns.com/<br>		architecture messaging	ACTIVE	2006-04-16 14:34:00-07	2012-05-07 04:10:03-07	
167	*Depend upon Abstractions*<br><br> Depend upon interfaces and abstract functions rather than upon concrete functions and classes. This principle is the enabling force behind component design.<br><br> Abstractions / interfaces are the design 'hinge points' - the places where the design can bend or be extended.<br><br> Every dependency in the design should target an interface or abstract class. This is draconian and we should allow ourselves to bend it - but only rarely. For example it is ok to depend on concrete classes from java standard libraries.<br><br> Object creation is the most common place this principle is violated - instead of constructing objects yourself use the AbstractFactoryPattern.<br><br> Interfaces that we extract and depend on should usually be put in the package that uses them rather than in the package that implements them.<br>		design interface	ACTIVE	2006-04-16 12:50:16-07	2012-05-08 04:10:07-07	DependencyInversionPrinciple
168	 *Open-Closed Principle*<br><br> We should write our modules so that they can be extended without requiring them to be modified. In other words we want to be able to change what the modules do without changing the source code of the modules.<br><br> This is achieved through *abstraction*.<br><br> Make objects interact with interfaces instead of concrete classes so that if we want different behaviour we can provide a different implementation of the interface, without changing any of the code that uses the interface.<br><br> If we need to extend / modify a concrete class that we own we extract an interface, make the clients use that, and then provide whatever behaviour we want.<br><br> If we need to extend / modify a concrete class that we do not own (say from an external library) we can sub-class it.<br><br> The Open Closed principle means that changes don't propagate into existing code that already works: If we don't have to change working code we aren't likely to break it.<br>		design principles	ACTIVE	2006-04-16 12:50:16-07	2012-05-09 04:10:08-07	OpenClosedPrinciple
169	Methods can be split into:<br><br>- Accessor / Query methods. They return a value. They should have no SideEffects.<br><br>- Mutator / Set methods: <br>		methods	ACTIVE	2006-04-16 12:50:16-07	2012-05-10 04:10:05-07	MethodNaming
170	*Pair Programming*<br><br>Teams go more smoothly when they pair -- you make fewer mistakes, the designs are better, you're much more likely to automate tedious processes than if you're alone. Somebody called it programming naked. It has all these wonderful effects once you get over the nudity aspect. For me, everything is a plus with pairs. I simply ask people to make an informed decision.<br>	Kent Beck	pair programming people	ACTIVE	2006-04-16 12:50:16-07	2012-05-11 04:10:02-07	PairProgramming
171	Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.<br><br>The practitioner of literate programming can be regarded as an essayist, whose main concern is with exposition and excellence of style.<br><br>---Donald Knuth. "Literate Programming (1984)<br>	Donald Knuth	literate programming	ACTIVE	2006-04-16 14:49:00-07	2012-05-14 04:10:08-07	
172	 Package Design:<br><br> Group classes together in a same package that relate to the same abstraction. All User related classes should go in the user package.<br><br> Group classes together in a same package that are likely to change together. If a class imports lots of classes from another package, maybe it should be in that package - minimising imports is a useful heuristic in deciding where a class should go.<br><br> Minimise the number of 'visible' classes in a package. In the way that an object will expose an interface (public methods) but have many more internal ones (private methods), a package should have only one or a few classes that a client will ever have to interact with. Make the constructors / factory methods on the internal only classes 'protected' or 'private' to document this.<br><br> Do not allow cycles in the package dependency graph. For example A -> B -> C -> A is not allowed. <br> To break these cycles we can add a new package, to give us A -> D, A -> B -> C -> D<br> A better solution is to use the DependencyInversionPrinciple and extract an interface.<br><br>Depend in the direction of stability. Depend upon packages whose Package Instability (see MetricsPage) is lower than yours.<br>		package design	ACTIVE	2006-04-16 12:50:16-07	2012-05-15 04:10:05-07	PackageDesign
173	 Personal practices:<br><br>1. Do the simplest thing that could possibly work.<br>The is another way of saying 'Conquer Complexity' which is what software engineering is all about. So it's not _really_ a practice, but I keep it in mind at all times.<br><br>2. Clean code<br>This is good layout, spacing, nice variable names, etc. <br>This to me is the most basic way of conquering complexity. If reading a simple method is hard to do we have little chance understanding the whole system.<br><br>3. Low coupling - high cohesion:<br>Also called putting things that belong together together and separating things that don't. The practical programmers call it DRY and Orthogonality. Divide and Conquer.<br>This principle applies at all levels of structure, from the code through methods, classes, packages, apps/components, systems up to an organisational level (well, if they let me !)<br><br>4. Refactoring.<br>I noted that it often feels like remodelling a building with a small chisel.<br><br>5. Good tools:<br>The unix command line, a good IDE, version control, a language 'with batteries included'. I am sure the trend towards meaningfull variable names (compared to the one or two characters of C days) is at least partly because in modern IDEs you don't have to type them every time.<br><br>6. Small iterations / easy releases. As modern living takes its toll on my attention span I'm counting on this practice to save me. Doing things a bit at a time is just some much simpler.<br><br>7. Time management.<br>'Take a break' was mentioned, this is similar. Staying late or leaving early. Deciding when to leap in and do the big concept juggling and when to stick to the safe waters. Deciding when to 'sprint'. Waiting till familiar enough with a new legacy before attempting big refactorings. Realising that it's best not to be 'courageous' mid afternoon when you had a big bowl of sleep inducing pasta for lunch. That type of thing. Oh, and not coming back to the office after someones leaving drinks to make that small change :-)<br><br>8. 'Heuristics of experience'<br>Grab bag of all those little things you learn. For example how a need for different behaviour depending on the type of a class means you need to push the behaviour down into the subclasses and have an abstract method on the current level. Or that a method with lots of comments is probably too complex. Or that a big switch or if/else statement can be turned into data driven code. Etc. This is intuition / smells.<br>Maybe I should of called it 'Learning to smell'<br><br>9. Unit testing:<br>The main advantage is knowing that the ten lines I have just written are correct.<br><br>10. A programming accomplice: This is a weak version of pair programming. Another person if very usefull to discuss / review / sanity check things with. They care about the code, control rot whilst you are away, buffer interuptions whilst you are juggling concepts, spread practices, have ideas, spread enthusiasm to others, and so on. Fighting the good fight on your own can be wearing. <br>	Graham King	personal practices	ACTIVE	2006-04-16 12:50:16-07	2012-05-16 04:10:06-07	PersonalPractices
174	*Guerilla Meeting Facilitation*<br>By Michael Wilkinson, Managing Director, Leadership Strategies<br><br>There will be times when a meeting is not going well, but the meeting leader is not taking action. "Guerrilla Facilitation" is a set of techniques designed to help manage a meeting when you are not the meeting leader. The key to Guerrilla Facilitation is to ask questions that lead the group to take the action that is needed. There are several situations in which Guerrilla Facilitation might be helpful.<br><br>*The Meeting Starts without a Clear Purpose*<br>The agenda of a meeting, and the discussion that occurs, should all be tied to the purpose of the meeting and the products to be created. Yet often times, leaders start a meeting by either going over the agenda or diving straight into the first agenda item. If the meeting leader starts the meeting without stating the meeting's purpose, you might say the following:<br>"Excuse me. I may have missed it. Could you take a second to go over the overall purpose of this meeting and what we need to have when we are done? This will help me stay focused and make sure I don't go off on unimportant topics. What's our overall purpose for this meeting?"<br>*Note that a Guerrilla Facilitator never accuses (e.g., "You didn't state the purpose"). Instead, a Guerrilla Facilitator asks a question to help gain clarity.<br><br>*The Discussion is Getting Off Track*<br>A facilitator uses redirection questions to keep a group on topic. Likewise, if the discussion seems to be getting off track, but you are not the meeting leader, you can say the following: <br>"These are excellent points we are discussing. I know we have to get back to our main topic, but I don't want to lose these points. Can we record them on an 'Issues List' or something so we can discuss them later, and then get back to our main topic?"<br><br>*One Person is Dominating*<br>A facilitator uses specific techniques for addressing dysfunctional behavior, including a situation in which one person is dominating the discussion. These same techniques can be quite effective as a guerrilla Facilitator as well. If the meeting leader allows one person to dominate the discussion, consider saying the following:<br>"This is an important point we are discussing, and Joe has openly shared his views. It would be great to hear everyone else's opinion on this. Can we go around the room and have everyone give their view on this idea?"<br><br>*One or More Participants Have Dropped Out*<br>The round-robin technique that is used when one person is dominating the discussion will also work when you sense that one or more people are not participating. <br>"This is an important issue we are discussing. It would be great to hear everyone else's opinion on this. Can we go around the room and have everyone give their view  on this idea? I'll be glad to start?"<br><br>*Decisions or Actions are not being Documented*<br>Facilitators know the importance of documenting all decisions made during the session and any actions that need to be taken. Sometimes, however, a decision can be made or an action indicated and the meeting leader might fail to record it. If this happens, consider saying the following:<br>"It sounds like we just made an important decision. Can we have someone repeat it so the decision can be accurately recorded and we will have documentation of the decision made?"<br>	Michael Wilkinson	meeting facilitation	ACTIVE	2006-04-16 12:50:16-07	2012-05-17 04:10:07-07	MeetingsAndConferences
175	 Try running conference as an Open Space: http://martinfowler.com/bliki/OpenSpace.html<br>		conference	ACTIVE	2006-04-16 14:55:00-07	2012-05-18 04:10:02-07	
176	*Better Meetings*<br><br>Consider having stand-up meetings.<br><br> Implement the Decider Protocol:<br>http://www.darkcoding.net/behaviour/decider-protocol/<br><br>See also:<br><br>http://www.37signals.com/svn/archives2/meetings_considered_harmful.php<br>http://www.37signals.com/svn/archives2/you_still_want_meetings_heres_how_to_make_them_useful.php<br>		meeting	ACTIVE	2006-04-16 14:57:00-07	2012-05-21 04:10:05-07	
177	 *A conscious process for welcoming new employees* <br><br>So, when it comes to people, we start at the beginning. We treat people the way we'd like to be treated ourselves, and we keep things personal. If you get a job at innocent, your offer arrives with a case of drinks. Once the legal bit is over, we send you a little handbook that tells you all about life at Fruit Towers. And we make sure we give you a ring in the month before you join, just to say "hi" and make sure everything is OK.<br><br>We've found it's the little things that are appreciated best. Things like having flowers on your desk when you arrive, and a nice little timetable that maps out your first two weeks. We also give people a pack of photos of the people they'll be working with and a map of the office, so they can recognise and find their new mates.<br><br>But the bit that innocent people remember about their first few days is the "lunchmate". In your first two weeks, you are scheduled a series of lunch dates with all sorts of people. So, as well as doing all the boring work stuff, you get to find out the office gossip and make a bunch of new friends. No more sitting in the local park on your own nibbling at a sandwich on a bench because you don't know anyone yet. <br><br>From: http://money.guardian.co.uk/workweekly/story/0,,1592529,00.html <br>	Innocent Drinks	hr people	ACTIVE	2006-04-16 12:50:16-07	2012-05-22 04:10:02-07	HumanResources
178	 Setup a marketplace of ideas - a sort of stock exchange. Employess get virtual money and can invest in and / or volunteer for a project. This is to gather ideas from throughout the organisation - best project emergence.<br><br>http://www.nytimes.com/2006/03/26/business/yourmoney/26mgmt.html 		hr people	ACTIVE	2006-04-16 12:50:16-07	2012-05-24 04:10:03-07	HumanResources
179	<br> - Afferent Coupling (Ca): The number of classes outside the package that depend upon classes inside the package (i.e. incoming dependencies).<br><br> - Efferent Coupling (Ce): The number of classes outside the package that clases inside the package depend upon (i.e. outgoing dependencies).<br><br> - Package Instability: Ce / (Ca + Ce). The range is 0 to 1. If there are no outgoing dependencies then this is 0 and the package is stable (changes to other packages will not propagate to it).<br>		package metrics	ACTIVE	2006-04-16 12:50:16-07	2012-05-25 04:10:05-07	MetricsPage
180	 *Side Effects*<br><br> A side effect is when a function / method changes something whilst it runs, so it's behaviour is no longer simply take input and process output. It does something else as well.<br>Typical examples of side effects include changing global / class variables and IO (to file, socket, etc).<br><br>Side effects are generally to be avoided as they will not be obvious to people reading the code.<br><br>Methods that return a value (called accessor or query methods) should be idempotent i.e. you should be able to run them again and again without the system changing state. They should have no side effects.<br>		side effects glossary	ACTIVE	2006-04-16 12:50:16-07	2012-05-28 04:10:07-07	SideEffects
181	 eXtreme Programming:<br><br>As a system of thought, XP is built on 3 tenets:<br><br>   1. change is inevitable<br>   2. change is essential<br>   3. change cannot be predicted<br><br>Everything in XP is built around this core philosophy: accepting that we must embrace change, how can we minimise the cost of change (remember the much maligned "cost of change" curve?). The values are nothing other than general mechanisms for helping us deal with change:<br><br>    * Why do we value feedback? Because feedback tells us whether or not we need to change and whether or not the change is working.<br>    * Why do we value communication? Because communication ensures that we all know what is changing and helps us identify what to change.<br>    * Why do we value simplicity? Because simpler things are easier to change than complex things.<br>    * Why do we value courage? Because change always requires courage.<br>	Owen Rogers	extreme programming think	ACTIVE	2006-04-16 12:50:16-07	2012-05-29 04:10:06-07	ExtremeProgramming
182	 *Observer Pattern*<br><br> Java calls this the Listener pattern. <br><br> It often occurs that one element of a design needs to take an action when another element of the design discovers that an event has occurred.  Often we don't want the detector to know about the action taker. For example many different meters might want to know about changes in a sensor.<br><br> In practice the meters all implement a standard interface and register themselves with the sensor. When its state changes the sensor calls a method on each of the registered observers (listeners).<br>		observer pattern	ACTIVE	2006-04-16 12:50:16-07	2012-05-30 04:10:01-07	ObserverPattern
183	Agile methodology: a system of methods designed to minimize the cost of change, especially in a context where important facts emerge late in a project, or where we are obliged to adapt to important uncontrolled factors.<br><br>A non-agile methodology, by comparison, is one that seeks to achieve efficiency by anticipating, controlling, or eliminating variables so as to eliminate the need for changes and associated costs of changing. 	James Bach	agile methodology	ACTIVE	2006-05-10 20:29:00-07	2012-05-31 04:10:02-07	
184	Your team should know figures for their burn-rate (cost of development per week) and also the cost of delay per week. This helps give them focus on what to do next. Sadly such awareness is rare in software development, most developers work away oblivious of project costs and benefits. It's rare for developers to hear about the value generated from their software releases.<br><br>So developers, don't just polish your code without understanding how your software delivers value - start asking for some real numbers! <br>	Rachel Davies	value metric	ACTIVE	2006-05-10 20:30:00-07	2012-06-01 04:10:02-07	
185	I remember a nice presentation years ago by someone from IBM in which he compared pervasive computing to the spread of clocks: the clock tower was equivalent to the mainframe, the grandfather clock to the minicomputer, the clock-radio to the PC, and the embedded clocks you see everywhere to the future of computing 	Tim O'Reilly	analogy	ACTIVE	2006-05-10 20:31:00-07	2012-06-04 04:10:02-07	
186	A complex system that works is invariably found to have evolved from a simple system that worked�.A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over, beginning with a working simple system. <br>	John Gall	complex system	ACTIVE	2006-05-10 20:31:00-07	2012-06-05 04:10:01-07	
187	*Future perfect retrospective*<br><br> At the beginning of a project, get the team together and ask "Imagine that this is the retrospective at the end of the project - how would you like the project to have turned out?" This sets the scene for how the team want to operate.<br><br>	Norm Kerth, Andy Pols	team retrospective	ACTIVE	2006-05-12 15:49:00-07	2012-06-06 04:10:02-07	
188	Apache is bandwidth limited, PHP is CPU limited, and MySQL is memory limited and disk I/O bound.<br>		lamp performance	ACTIVE	2006-07-17 11:10:00-07	2012-06-07 04:10:02-07	
189	The real intellectual challenge of business software is figuring out what the real contribution of software can be to a business.<br><br>One of Kent Beck's suggested names for 'Agile' was conversational software development - the point being that it's a two way communication. A back and forth discussions about how software can enhance the business and where the real value lives. <br>	Martin Fowler	value	ACTIVE	2006-07-31 17:41:00-07	2012-06-08 04:10:02-07	
190	*Internet Robustness Principle*<br><br>Software communicating to other software should follow the Internet Robustness Principle:<br><br>"Be liberal in what you accept, and conservative in what you send"<br><br>---<br>The implementation of a protocol must be robust. Each implementation must expect to interoperate with others created by different individuals. While the goal of this specification is to be explicit about the protocol there is the possibility of differing interpretations. In general, an implementation should be conservative in its sending behavior, and liberal in its receiving behavior. That is, it should be careful to send well-formed datagrams, but should accept any datagram that it can interpret (e.g., not object to technical errors where the meaning is still clear).<br>---<br>From RFC 760 "DOD STANDARD INTERNET PROTOCOL" (1980).<br><br>See also: http://ironick.typepad.com/ironick/2005/05/my_history_of_t.html<br>	Jon Postel	robustness principle	ACTIVE	2006-10-31 22:30:00-08	2012-03-20 04:10:06-07	
191	Object-oriented code is easier to understand and maintain if it is written in a  "Tell, Don't Ask" style. Decisions are made by objects on information that they hold or receive as parameters, not on information that is held by other objects.  That is, objects tell each other what to do by sending commands to one another, they don't ask each other for information and then make decisions upon the results of those queries.<br><br>The end result of this style is that it is easy to swap one object for another that can perform the same commands.<br><br>The extreme opposite is "train-wreck" code that contains lots of statements like  "neighbour.getPart().getSubpart().getAttribute()".  In this kind of code, the implementation of an object is coupled to the<br>structure of its neighbour, and so it is difficult to replace its neighbour with one that is implemented differently.<br><br>Sometimes you *do* need to ask an object about itself, for example when using Value Objects (which are immutable), Collections, and, although this is a slighty different case, Factories.<br><br>The main lesson is to be suspicious of queries and limit their use as much as possible.<br>	Nat Pryce	OO design	ACTIVE	2006-10-31 22:18:00-08	2012-03-21 04:10:02-07	
192	 Questions to ask a company you are interviewing at:<br><br> - If I want to buy something like a book or a tool, how does the process work (how hard is it?). What's the cost limit before the approval must go up the management chain?<br> - What's the noise level like during the day?<br> - How many meetings am I expected to attend, and how long do they usually last?<br> - Is there a dress code?<br> - Can I work from home sometimes?<br> - Does it matter when I work, as long as I come to meetings?<br> - How many projects have succeeded/failed in the last five years? To what do you attribute the failures? <br> - How does the group communicate ? (What Wiki, bug tracker and version control system do you use ?)<br> - How does an employee who has an idea for a new product or project present it to someone with the authority to move it forward?<br> - How, to whom, and how often are you required to report status?<br>- Can I pick out my own machine/OS? (Mac, Windows, Linux)<br>- How long does it take to get a development environment setup ? How long does it take to do a complete build, ready to run in debug mode on a developer's machine ?<br> - Do you maintain regular release cycles? What is the average length of time between releases? How about in the past 3 months?<br><br> And most importantly:<br> - Can we go sit at your machine and look at some code ?<br>	Bruce Eckel and others	interview	ACTIVE	2006-10-10 14:44:00-07	2012-02-16 04:10:06-08	
193	 In the past few days spammers seem to of discovered the 'submit' link on carriagereturn.org. This morning a spam made it past me and got mailed / RSSed out to you all. My apologies. I have disabled the 'submit' link for the time being.<br><br> When I have some time I intend to restore the submit link with a spam-proof addition: Kitten Auth http://www.thepcspy.com/kittenauth<br><br> - Graham<br>	Graham King	apology	ACTIVE	2006-09-28 10:34:00-07	2012-06-29 04:10:02-07	
194	From Richard Pascale's book Delivering Results: "People are much more likely to act their way into a new way of thinking, than think their way into a new way of acting."<br><br>How true. We like to believe that we think, we analyze, we decide, we change, but in fact, so much of our thought is a response to what we do and experience. While Pascale was writing in an HR/business management context, his insight is perhaps even more important in the context of social change. It reminds me of another great line, which my wife likes to quote, from Buckminster Fuller: "Don't change the man. Change his environment."<br>	Tim O'Reilly	change	ACTIVE	2006-09-11 14:04:00-07	2012-06-14 04:10:02-07	
195	Tim Berners-Lee:<br>"I chose HTML not to be a programming language because I wanted different programs to do different things with it: present it differently, extract tables of contents, index it, and so on."<br><br>Dave Clark, 1990, describing the new Internet community:<br>"We have no kings or presidents. We believe in rough consensus and running code."<br><br>Scott Berkun on 'negotiating' estimates:<br>"Programmers should be trusted. If your brain surgeon told you the operation you need takes five hours, would you pressure him to do it in three?"<br>	Various	quotes	ACTIVE	2006-10-31 22:44:00-08	2012-03-22 04:10:06-07	
196	    "If you want to build a ship, don't drum up the men to gather wood, divide the work and give orders. Instead, teach them to yearn for the vast and endless sea."<br><br> - Antoine de Saint-Exup�ry (attributed)<br><br>There are a lot of ways to build bad engineering teams, and very few ways to build great ones. I've come to believe that the attributed quote above spells out pretty much the only way I know how to build a great development group.<br><br>The best way to get developers to build something great is to make them believe your goal is worthwhile. If you do, control from the top will not only be unnecessary; it will be impossible. That's the best situation you can hope to create, and frankly I love that so many people don't believe that, since it makes things so much easier for those of us who do.<br>	Marc Hedlund	team	ACTIVE	2006-12-04 12:56:00-08	2012-04-24 04:10:05-07	
197	One of the under-appreciated elements in the success of open source software projects is their modular design, which is an essential element of an architecture of participation. <br><br>It's easier for people to collaborate around small chunks, and to build up larger works piece by piece, than it is for them to work together on a large, complex project with many dependencies.<br>	Tim O'Reilly	participation	ACTIVE	2007-01-26 13:06:00-08	2012-06-19 04:10:02-07	
198	One of the problems with a FluentInterface is that it results in some odd looking methods. Consider this example:<br><br>customer.newOrder()<br>  .with(6, "TAL")<br>  .with(5, "HPK").skippable()<br>  .with(3, "LGV")<br>  .priorityRush();<br><br>Methods like with, skippable, and priorityRush don't sit well on the Order class. The naming works well in the context of the little DomainSpecificLanguage that the fluent interface provides, but we usually expect methods to make sense in their own right.<br><br>An Expression Builder is a solution to this problem. An expression builder is a separate object on which we define the fluent interface that then translates the fluent calls to the underlying regular API calls. So an expression builder for the order case would look something like this.<br><br>public class OrderBuilder {<br>  private Order subject = new Order();<br>  private OrderLine currentLine;<br><br>  public OrderBuilder with(int quantity, String productCode) {<br>    currentLine = new OrderLine(quantity, Product.find(productCode));<br>    subject.addLine(currentLine);<br>    return this;<br>  }<br><br>  public OrderBuilder skippable() {<br>    currentLine.setSkippable(true);<br>    return this;<br>  }<br><br>  public OrderBuilder priorityRush() {<br>    subject.setRush(true);<br>    return this;<br>  }<br><br>  public Order getSubject() {<br>    return subject;<br>  }<br>}<br>	Martin Fowler	Expression builder	ACTIVE	2007-01-26 14:34:00-08	2012-06-20 04:10:02-07	
199	"<br>It strikes me that one of the big differences between the 1.0 class of data aggregators and the 2.0 class is the difference between "back office" and "live" applications. The credit card company mines its database to select you for direct mail offers; it may even get close to real time in monitoring your card activity for fraud or credit limit detection. But Google or Amazon mines its database in real time and builds the results right into its customer-facing applications.<br><br>How can you turn your data from a back-office asset that benefits only your company into a driver of dynamic user-facing services? How can you make your software more responsive to its users, harnessing their collective intelligence and learning from them? How can you make your software or site more alive?<br>"<br><br>From http://radar.oreilly.com/archives/2007/05/what_would_goog.html<br>	Tim O'Reilly	live web20 data	ACTIVE	2007-05-10 12:54:16-07	2012-05-23 04:10:04-07	
200	There are 4 core platforms in existence today: C, JVM , .Net CLR and Javascript in the browser. Every language runs on top of one of those.<br>		Language platforms	ACTIVE	2008-08-03 19:47:19-07	2012-02-22 04:10:07-08	
201	import os<br>import sys<br><br>class TestDaemon:<br><br>    def run_daemon(self):<br>        # Disconnect from tty<br>        try:<br>            pid = os.fork()<br>            if pid>0:<br>                sys.exit(0)<br>        except OSError, e:<br>            print >>sys.stderr, "fork #1 failed", e<br>            sys.exit(1)<br><br>        os.setsid()<br>        os.umask(0)<br><br>        # Second fork<br>        try:<br>            pid = os.fork()<br>            if pid>0:<br>                open(PIDFILE,'w').write(str(pid))<br>                sys.exit(0)<br>        except OSError, e:<br>            print >>sys.stderr, "fork #2 failed", e<br>            sys.exit(1)<br>            <br>        self.run()<br><br>    def run(self):<br>        // Your code here<br><br>if __name__ == "__main__":<br>    c = TestDaemon()<br>    c.run_daemon()<br><br>	Anand Balachandran Pillai	python daemon	ACTIVE	2009-03-22 21:55:59-07	2012-02-23 04:10:03-08	
202	The fundamental question that the web answers isn't whether REST is better than SOAP, but whether emergence is more likely to create innovation than enterprise planning, and the answer to that question is yes.<br><br>http://radar.oreilly.com/2009/01/the-army-the-web-and-the-case.html	Jim Stogdill	emergence innovation	ACTIVE	2009-03-22 21:59:06-07	2012-02-24 04:10:07-08	
203	I'm a bohemian type, so I could scarcely be bothered to do anything "financially sound" in my entire adult life. Last year was the first year when I've felt genuinely sorry for responsible, well-to-do people.<br><br>Suddenly they've got the precariousness of creatives, of the underclass, without that gleeful experience of decades spent living-it-up.<br><br>http://www.well.com/conf/inkwell.vue/topics/343/Bruce-Sterling-State-of-the-Worl-page01.html	Bruce Sterling	creditcrunch 2008 bohemian	ACTIVE	2009-03-22 22:01:26-07	2012-02-27 04:10:03-08	
204	OSS is in need of some rationalization. Individually it's fun to keep rewriting web frameworks, content management systems, enterprise middleware, build systems, interface definition languages, AtomPub servers, and so on. At a macro-economic level it's a waste of electricity and natural resources - that might come to be seen as unethical.<br>	Bill de h�ra	open-source sustainability	ACTIVE	2009-03-22 22:03:53-07	2012-02-28 04:10:06-08	
205	Great minds discuss ideas; Average minds discuss events; Small minds discuss people.	Eleanor Roosevelt	mind	ACTIVE	2009-03-22 22:05:32-07	2012-02-29 04:10:04-08	
206	Three kraters [shallow bowls used as wine cups] do I mix for the temperate: one to health, which they empty first, the second to love and pleasure, the third to sleep. <br>When this bowl is drunk up, wise guests go home. The fourth bowl is ours no longer, but belongs to hubris, the fifth to uproar, the sixth to prancing about, the seventh to black eyes, the eighth brings the police, the ninth belongs to vomiting, and the tenth to insanity and the hurling of furniture.<br>	EUBULUS, fourth-century Greek poet and playwright	dionysus alcohol moderation	ACTIVE	2009-03-22 22:07:05-07	2012-03-01 04:10:06-08	
207	## Why does corporate America have such an aversion to telecommuting?<br><br>It's a limitation of the OS that is built into humans. This is what you get when you try to build a global economic system out of bright, talkative monkeys like me. It turns out that -- amazingly! -- this can be done, but we find it much easier if we employ hacks that leverage the features of our underlying monkey OS. And -- even more amazingly! -- it turns out that we can go even farther: Using our most advanced mental and physical tools, we can do a pretty good emulation of disembodied brains sitting in the nth dimension. But the abstraction leaks. Especially when we have to interact with other people who haven't been fully schooled in the art of communicating with ghosts.<br><br>If dolphins ran the world, corporate boardrooms would be full of water. But monkeys run the world, so:<br><br>- Businesses are run as hierarchies, because the monkey OS is designed to manage bands of around ten or fifteen individuals. Beyond that, it operates in terms of alliances ("this platoon is allied with that platoon") and rivalries ("our platoon is doing its job, but that one isn't"; "our platoon is falling behind and will be targeted for cutbacks, so work hard and watch your back"; "let's all get together with Platoon Three to kick Platoon Four's obnoxious butt").<br><br>- Your status in the business world is judged based on the size of the conference room that you need to hold a physical gathering of your team members, and on the size of the contiguous physical territory that your team occupies and patrols on a daily basis. If you sit alone at your desk with the speakerphone on and claim to be conducting a meeting with fifteen colleagues, people will subconsciously think of you as a psychotic, or (at best) as a spooky witch doctor who channels the spirit world.<br><br>- There's a tendency to defer to people with grey hair, and/or people with lots of followers or lots of stuff that has taken time to accumulate, like corner offices or expensive desks.<br><br>- Talk is cheap. Many people will say they're your ally, but when a fight arrives they will not be there, or they'll discover some really interesting thing going on atop a nearby tree, or they'll hang back and not really fight very hard. You need to motivate them by really befriending them -- talking about their kids or their pets or their hobbies, bringing them little gifts. And by physically surrounding them with other friendly allies, such that they cannot easily flee without losing face. And by keeping them close enough to be able to slap them upside the head when they seem to be shirking.<br><br>- To really convince someone -- to really communicate at the highest level -- you need to be standing close enough that you could, in theory, pick fleas off of them.<br><br>Unfortunately, though humans are becoming better and better at understanding all this stuff and transcending it when necessary [1], we're never going to completely eliminate these tendencies. Unless the lizards rise up, overthrow us, and take back the planet. At which point they will have complaints of their own. ("Dear Gator News: How come companies always insist on holding meetings on rocks in the bright sunlight? I'm much more productive in my moonlit office, where I can sit on my dual 27-inch space heaters.")<br><br>---<br><br>[1] Such as: When trying to write software, which is an act so unnatural to us monkeys that only some of us can do it at all, and many of us are doing it wrong. And it requires all kinds of mental tricks and energy and focus just to manage that much.<br><br>---<br>http://news.ycombinator.com/item?id=460693 - comment by mechanical_fish<br>	mechanical_fish	telecommuting office great-ape	ACTIVE	2009-03-22 22:12:57-07	2012-03-02 04:10:05-08	
208	Three goals of application architecture:<br><br>- Scalability<br><br>- High-Availabily<br><br>- Performance<br>	Cal Henderson	application architecture	ACTIVE	2009-06-08 20:47:04-07	2012-04-03 04:10:02-07	
209	One of the telling differences between an application design that is handled by a designer and one that is handled more by a development team is spacing. Developers don't usually think much about how element should sit on a screen together, so you see a lot of items crammed together or unevenly distributed. This is the kind of thing an average user can't put their finger on, but on a subconscious level, it bothers them and gives them a negative opinion of the application.	Rich Barrett	Design UI Spacing	ACTIVE	2009-09-08 23:05:48-07	2012-06-26 04:10:02-07	
108	 Gathering requirements can be done as<br><br> - UseCases<br><br> - UserStories<br>		gathering requirements	ACTIVE	2006-04-16 12:50:16-07	2012-06-15 04:10:02-07	GatheringRequirements
\.


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

